{"cells":[{"cell_type":"code","metadata":{},"source":"%%configure -n project.spark.compatibility\n{\n    \"number_of_workers\": 10,\n    \"session_type\": \"etl\",\n    \"glue_version\": \"5.0\",\n    \"worker_type\": \"G.1X\",\n    \"idle_timeout\": 5,\n    \"timeout\": 60,\n    \"--enable-glue-datacatalog\": \"true\",\n    \"--enable-auto-scaling\": \"true\",\n    \"--project_s3_path\": \"s3://amazon-sagemaker-841815105446-us-east-2-8d69110117c2/dzd_d4jvhfifm74a5l/4uh5o13tjcakvd/dev\",\n    \"--redshift_iam_role\": \"arn:aws:iam::841815105446:role/datazone_usr_role_4uh5o13tjcakvd_4n5bxpjsnwdcmh\",\n    \"--redshift_tempdir\": \"s3://amazon-sagemaker-841815105446-us-east-2-8d69110117c2/dzd_d4jvhfifm74a5l/4uh5o13tjcakvd/dev/redshift-tmp/\",\n    \"--enable-lakeformation-fine-grained-access\": \"false\",\n    \"--datalake-formats\": \"iceberg\"\n}","execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{},"source":"%%pyspark project.spark.compatibility\nimport sys\nfrom pyspark.context import SparkContext\nfrom pyspark.sql import SparkSession\n\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.sql.functions import *\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\nimport json\nimport boto3\nimport gzip\nimport io\nimport os\nimport logging\nfrom typing import Optional\nfrom pyspark.sql import SparkSession\nfrom urllib.parse import urlparse\nimport random\nfrom py4j.protocol import Py4JJavaError\nimport builtins\nimport csv","execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{},"source":"%%pyspark project.spark.compatibility\nsc = SparkContext.getOrCreate()\nspark = SparkSession.builder.getOrCreate()\n","execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{},"source":"%%pyspark project.spark.compatibility\n# Script generated for node CatalogDataSource\nCatalogDataSource_17514746656004 = spark.sql(\"select * from `glue_db_ddsjx9xtu1v6i1`.`employee`\")","execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{},"source":"%%pyspark project.spark.compatibility\n# Script generated for node FilterTransform\nFilterTransform_17514746656015 = CatalogDataSource_17514746656004.filter(\"`salary` > '100k'\")","execution_count":0,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"maxdomeModel":{"nodes":[{"data":{"label":"Amazon SageMaker Lakehouse","nodeDescription":"Read from a table in your Lakehouse catalogs.","iconName":"lakehouse_colored","classification":"DataSource","senseiType":"Catalog","dataModel":"Structured","type":"dataSourceSPARK_GLUE","inputShape":{"total":0},"fields":[{"fieldName":"options","fieldLabel":"Options","type":"custom","customType":"glueTableQuerySelector","value":{"catalog":"default","database":"glue_db_ddsjx9xtu1v6i1","table":"employee","inputType":"database/table"},"validator":{"_def":{"typeName":"ZodDiscriminatedUnion","discriminator":"inputType","options":[{"_def":{"unknownKeys":"strip","catchall":{"_def":{"typeName":"ZodNever"}},"typeName":"ZodObject"},"_cached":{"shape":{"inputType":{"_def":{"value":"database/table","typeName":"ZodLiteral"}},"catalog":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}},"database":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}},"table":{"_def":{"checks":[{"kind":"regex","regex":{}},{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}}},"keys":["inputType","catalog","database","table"]}},{"_def":{"unknownKeys":"strip","catchall":{"_def":{"typeName":"ZodNever"}},"typeName":"ZodObject"},"_cached":null}],"optionsMap":[["database/table",{"_def":{"unknownKeys":"strip","catchall":{"_def":{"typeName":"ZodNever"}},"typeName":"ZodObject"},"_cached":{"shape":{"inputType":{"_def":{"value":"database/table","typeName":"ZodLiteral"}},"catalog":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}},"database":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}},"table":{"_def":{"checks":[{"kind":"regex","regex":{}},{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}}},"keys":["inputType","catalog","database","table"]}}],["query",{"_def":{"unknownKeys":"strip","catchall":{"_def":{"typeName":"ZodNever"}},"typeName":"ZodObject"},"_cached":null}]]}}}]},"position":{"x":0,"y":0},"type":"MaxDomeBasicNode","id":"17514746656004","targetPosition":"left","sourcePosition":"right","measured":{"width":225,"height":56},"selected":true},{"type":"MaxDomeBasicNode","id":"17514746656015","position":{"x":350,"y":0},"data":{"label":"Filter","nodeDescription":"Filter data based on set conditions.","iconName":"filter_outlined","type":"transformFilter","classification":"Transform","senseiType":"Filter","dataModel":"Structured","inputShape":{"total":1},"fields":[{"fieldName":"filterType","fieldLabel":"Filter Type","fieldDescription":"Builds a new output by selecting records from the input data that satisfy a specified predicate function.","type":"radio","value":"or","validator":{"_def":{"innerType":{"_def":{"checks":[],"typeName":"ZodString","coerce":false}},"typeName":"ZodOptional"}},"listOptions":[{"label":"Global AND","description":"All filter conditions will be applied as a gloal \"AND\".","value":"and"},{"label":"Global OR","description":"All filter conditions will be applied as a global \"OR\".","value":"or"}]},{"fieldName":"filterCondition","fieldLabel":"Filter condition","fieldDescription":"Specify your filter condition by choosing the key, operator, and entering a value","type":"custom","customType":"filterConditionForm","value":[{"filterKey":"salary","filterOperation":">","filterValue":"100k"}],"validator":{"_def":{"type":{"_def":{"unknownKeys":"strip","catchall":{"_def":{"typeName":"ZodNever"}},"typeName":"ZodObject"},"_cached":{"shape":{"filterKey":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}},"filterOperation":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}},"filterValue":{"_def":{"checks":[{"kind":"min","value":1,"message":"Required"}],"typeName":"ZodString","coerce":false}}},"keys":["filterKey","filterOperation","filterValue"]}},"minLength":{"value":1},"maxLength":null,"exactLength":null,"typeName":"ZodArray"}}}]},"targetPosition":"left","sourcePosition":"right","measured":{"width":225,"height":56},"selected":false}],"edges":[{"id":"17514746656004-17514746656015","source":"17514746656004","target":"17514746656015","type":"custom","data":{"hovering":false}}],"direction":"horizontal","engine":"Glue","viewport":{"x":919.7911994943614,"y":535.2614880502153,"zoom":0.9278734764712844},"interactiveSessionModel":{"additionalPythonModules":"","connections":[],"extraJars":[],"glueVersion":"5.0","extraPyFiles":[],"iamRole":"","numberOfWorkers":10,"sessionType":"etl","tags":{},"workerType":"G.1X","command":{"name":"glueetl","pythonVersion":"3"},"timeout":60,"idleTimeout":15},"name":"","version":"1.0.0","schemasMap":[["17514746656004",{"fields":[{"metadata":{},"name":"employee_id","nullable":true,"type":"long"},{"metadata":{},"name":"first_name","nullable":true,"type":"string"},{"metadata":{},"name":"last_name","nullable":true,"type":"string"},{"metadata":{},"name":"email","nullable":true,"type":"string"},{"metadata":{},"name":"phone_number","nullable":true,"type":"string"},{"metadata":{},"name":"hire_date","nullable":true,"type":"string"},{"metadata":{},"name":"job_id","nullable":true,"type":"string"},{"metadata":{},"name":"salary","nullable":true,"type":"long"},{"metadata":{},"name":"commission_pct","nullable":true,"type":"long"},{"metadata":{},"name":"manager_id","nullable":true,"type":"long"},{"metadata":{},"name":"department_id","nullable":true,"type":"long"}],"type":"struct"}],["17514746656015",{"type":"struct","fields":[]}]],"datasamplesMap":[["17514746656004",[{"employee_id":null,"first_name":"first_name","last_name":"last_name","email":"email","phone_number":"phone_number","hire_date":"hire_date","job_id":"job_id","salary":null,"commission_pct":null,"manager_id":null,"department_id":null},{"employee_id":"198","first_name":"Donald","last_name":"OConnell","email":"DOCONNEL","phone_number":"650.507.9833","hire_date":"21-JUN-07","job_id":"SH_CLERK","salary":"2600","commission_pct":null,"manager_id":"124","department_id":"50"},{"employee_id":"199","first_name":"Douglas","last_name":"Grant","email":"DGRANT","phone_number":"650.507.9844","hire_date":"13-JAN-08","job_id":"SH_CLERK","salary":"2600","commission_pct":null,"manager_id":"124","department_id":"50"},{"employee_id":"200","first_name":"Jennifer","last_name":"Whalen","email":"JWHALEN","phone_number":"515.123.4444","hire_date":"17-SEP-03","job_id":"AD_ASST","salary":"4400","commission_pct":null,"manager_id":"101","department_id":"10"},{"employee_id":"201","first_name":"Michael","last_name":"Hartstein","email":"MHARTSTE","phone_number":"515.123.5555","hire_date":"17-FEB-04","job_id":"MK_MAN","salary":"13000","commission_pct":null,"manager_id":"100","department_id":"20"},{"employee_id":"202","first_name":"Pat","last_name":"Fay","email":"PFAY","phone_number":"603.123.6666","hire_date":"17-AUG-05","job_id":"MK_REP","salary":"6000","commission_pct":null,"manager_id":"201","department_id":"20"},{"employee_id":"203","first_name":"Susan","last_name":"Mavris","email":"SMAVRIS","phone_number":"515.123.7777","hire_date":"07-JUN-02","job_id":"HR_REP","salary":"6500","commission_pct":null,"manager_id":"101","department_id":"40"},{"employee_id":"204","first_name":"Hermann","last_name":"Baer","email":"HBAER","phone_number":"515.123.8888","hire_date":"07-JUN-02","job_id":"PR_REP","salary":"10000","commission_pct":null,"manager_id":"101","department_id":"70"},{"employee_id":"205","first_name":"Shelley","last_name":"Higgins","email":"SHIGGINS","phone_number":"515.123.8080","hire_date":"07-JUN-02","job_id":"AC_MGR","salary":"12008","commission_pct":null,"manager_id":"101","department_id":"110"},{"employee_id":"206","first_name":"William","last_name":"Gietz","email":"WGIETZ","phone_number":"515.123.8181","hire_date":"07-JUN-02","job_id":"AC_ACCOUNT","salary":"8300","commission_pct":null,"manager_id":"205","department_id":"110"},{"employee_id":"100","first_name":"Steven","last_name":"King","email":"SKING","phone_number":"515.123.4567","hire_date":"17-JUN-03","job_id":"AD_PRES","salary":"24000","commission_pct":null,"manager_id":null,"department_id":"90"},{"employee_id":"101","first_name":"Neena","last_name":"Kochhar","email":"NKOCHHAR","phone_number":"515.123.4568","hire_date":"21-SEP-05","job_id":"AD_VP","salary":"17000","commission_pct":null,"manager_id":"100","department_id":"90"},{"employee_id":"102","first_name":"Lex","last_name":"De Haan","email":"LDEHAAN","phone_number":"515.123.4569","hire_date":"13-JAN-01","job_id":"AD_VP","salary":"17000","commission_pct":null,"manager_id":"100","department_id":"90"},{"employee_id":"103","first_name":"Alexander","last_name":"Hunold","email":"AHUNOLD","phone_number":"590.423.4567","hire_date":"03-JAN-06","job_id":"IT_PROG","salary":"9000","commission_pct":null,"manager_id":"102","department_id":"60"},{"employee_id":"104","first_name":"Bruce","last_name":"Ernst","email":"BERNST","phone_number":"590.423.4568","hire_date":"21-MAY-07","job_id":"IT_PROG","salary":"6000","commission_pct":null,"manager_id":"103","department_id":"60"},{"employee_id":"105","first_name":"David","last_name":"Austin","email":"DAUSTIN","phone_number":"590.423.4569","hire_date":"25-JUN-05","job_id":"IT_PROG","salary":"4800","commission_pct":null,"manager_id":"103","department_id":"60"},{"employee_id":"106","first_name":"Valli","last_name":"Pataballa","email":"VPATABAL","phone_number":"590.423.4560","hire_date":"05-FEB-06","job_id":"IT_PROG","salary":"4800","commission_pct":null,"manager_id":"103","department_id":"60"},{"employee_id":"107","first_name":"Diana","last_name":"Lorentz","email":"DLORENTZ","phone_number":"590.423.5567","hire_date":"07-FEB-07","job_id":"IT_PROG","salary":"4200","commission_pct":null,"manager_id":"103","department_id":"60"},{"employee_id":"108","first_name":"Nancy","last_name":"Greenberg","email":"NGREENBE","phone_number":"515.124.4569","hire_date":"17-AUG-02","job_id":"FI_MGR","salary":"12008","commission_pct":null,"manager_id":"101","department_id":"100"},{"employee_id":"109","first_name":"Daniel","last_name":"Faviet","email":"DFAVIET","phone_number":"515.124.4169","hire_date":"16-AUG-02","job_id":"FI_ACCOUNT","salary":"9000","commission_pct":null,"manager_id":"108","department_id":"100"},{"employee_id":"110","first_name":"John","last_name":"Chen","email":"JCHEN","phone_number":"515.124.4269","hire_date":"28-SEP-05","job_id":"FI_ACCOUNT","salary":"8200","commission_pct":null,"manager_id":"108","department_id":"100"},{"employee_id":"111","first_name":"Ismael","last_name":"Sciarra","email":"ISCIARRA","phone_number":"515.124.4369","hire_date":"30-SEP-05","job_id":"FI_ACCOUNT","salary":"7700","commission_pct":null,"manager_id":"108","department_id":"100"},{"employee_id":"112","first_name":"Jose Manuel","last_name":"Urman","email":"JMURMAN","phone_number":"515.124.4469","hire_date":"07-MAR-06","job_id":"FI_ACCOUNT","salary":"7800","commission_pct":null,"manager_id":"108","department_id":"100"},{"employee_id":"113","first_name":"Luis","last_name":"Popp","email":"LPOPP","phone_number":"515.124.4567","hire_date":"07-DEC-07","job_id":"FI_ACCOUNT","salary":"6900","commission_pct":null,"manager_id":"108","department_id":"100"},{"employee_id":"114","first_name":"Den","last_name":"Raphaely","email":"DRAPHEAL","phone_number":"515.127.4561","hire_date":"07-DEC-02","job_id":"PU_MAN","salary":"11000","commission_pct":null,"manager_id":"100","department_id":"30"},{"employee_id":"115","first_name":"Alexander","last_name":"Khoo","email":"AKHOO","phone_number":"515.127.4562","hire_date":"18-MAY-03","job_id":"PU_CLERK","salary":"3100","commission_pct":null,"manager_id":"114","department_id":"30"},{"employee_id":"116","first_name":"Shelli","last_name":"Baida","email":"SBAIDA","phone_number":"515.127.4563","hire_date":"24-DEC-05","job_id":"PU_CLERK","salary":"2900","commission_pct":null,"manager_id":"114","department_id":"30"},{"employee_id":"117","first_name":"Sigal","last_name":"Tobias","email":"STOBIAS","phone_number":"515.127.4564","hire_date":"24-JUL-05","job_id":"PU_CLERK","salary":"2800","commission_pct":null,"manager_id":"114","department_id":"30"},{"employee_id":"118","first_name":"Guy","last_name":"Himuro","email":"GHIMURO","phone_number":"515.127.4565","hire_date":"15-NOV-06","job_id":"PU_CLERK","salary":"2600","commission_pct":null,"manager_id":"114","department_id":"30"},{"employee_id":"119","first_name":"Karen","last_name":"Colmenares","email":"KCOLMENA","phone_number":"515.127.4566","hire_date":"10-AUG-07","job_id":"PU_CLERK","salary":"2500","commission_pct":null,"manager_id":"114","department_id":"30"},{"employee_id":"120","first_name":"Matthew","last_name":"Weiss","email":"MWEISS","phone_number":"650.123.1234","hire_date":"18-JUL-04","job_id":"ST_MAN","salary":"8000","commission_pct":null,"manager_id":"100","department_id":"50"},{"employee_id":"121","first_name":"Adam","last_name":"Fripp","email":"AFRIPP","phone_number":"650.123.2234","hire_date":"10-APR-05","job_id":"ST_MAN","salary":"8200","commission_pct":null,"manager_id":"100","department_id":"50"},{"employee_id":"122","first_name":"Payam","last_name":"Kaufling","email":"PKAUFLIN","phone_number":"650.123.3234","hire_date":"01-MAY-03","job_id":"ST_MAN","salary":"7900","commission_pct":null,"manager_id":"100","department_id":"50"},{"employee_id":"123","first_name":"Shanta","last_name":"Vollman","email":"SVOLLMAN","phone_number":"650.123.4234","hire_date":"10-OCT-05","job_id":"ST_MAN","salary":"6500","commission_pct":null,"manager_id":"100","department_id":"50"},{"employee_id":"124","first_name":"Kevin","last_name":"Mourgos","email":"KMOURGOS","phone_number":"650.123.5234","hire_date":"16-NOV-07","job_id":"ST_MAN","salary":"5800","commission_pct":null,"manager_id":"100","department_id":"50"},{"employee_id":"125","first_name":"Julia","last_name":"Nayer","email":"JNAYER","phone_number":"650.124.1214","hire_date":"16-JUL-05","job_id":"ST_CLERK","salary":"3200","commission_pct":null,"manager_id":"120","department_id":"50"},{"employee_id":"126","first_name":"Irene","last_name":"Mikkilineni","email":"IMIKKILI","phone_number":"650.124.1224","hire_date":"28-SEP-06","job_id":"ST_CLERK","salary":"2700","commission_pct":null,"manager_id":"120","department_id":"50"},{"employee_id":"127","first_name":"James","last_name":"Landry","email":"JLANDRY","phone_number":"650.124.1334","hire_date":"14-JAN-07","job_id":"ST_CLERK","salary":"2400","commission_pct":null,"manager_id":"120","department_id":"50"},{"employee_id":"128","first_name":"Steven","last_name":"Markle","email":"SMARKLE","phone_number":"650.124.1434","hire_date":"08-MAR-08","job_id":"ST_CLERK","salary":"2200","commission_pct":null,"manager_id":"120","department_id":"50"},{"employee_id":"129","first_name":"Laura","last_name":"Bissot","email":"LBISSOT","phone_number":"650.124.5234","hire_date":"20-AUG-05","job_id":"ST_CLERK","salary":"3300","commission_pct":null,"manager_id":"121","department_id":"50"},{"employee_id":"130","first_name":"Mozhe","last_name":"Atkinson","email":"MATKINSO","phone_number":"650.124.6234","hire_date":"30-OCT-05","job_id":"ST_CLERK","salary":"2800","commission_pct":null,"manager_id":"121","department_id":"50"},{"employee_id":"131","first_name":"James","last_name":"Marlow","email":"JAMRLOW","phone_number":"650.124.7234","hire_date":"16-FEB-05","job_id":"ST_CLERK","salary":"2500","commission_pct":null,"manager_id":"121","department_id":"50"},{"employee_id":"132","first_name":"TJ","last_name":"Olson","email":"TJOLSON","phone_number":"650.124.8234","hire_date":"10-APR-07","job_id":"ST_CLERK","salary":"2100","commission_pct":null,"manager_id":"121","department_id":"50"},{"employee_id":"133","first_name":"Jason","last_name":"Mallin","email":"JMALLIN","phone_number":"650.127.1934","hire_date":"14-JUN-04","job_id":"ST_CLERK","salary":"3300","commission_pct":null,"manager_id":"122","department_id":"50"},{"employee_id":"134","first_name":"Michael","last_name":"Rogers","email":"MROGERS","phone_number":"650.127.1834","hire_date":"26-AUG-06","job_id":"ST_CLERK","salary":"2900","commission_pct":null,"manager_id":"122","department_id":"50"},{"employee_id":"135","first_name":"Ki","last_name":"Gee","email":"KGEE","phone_number":"650.127.1734","hire_date":"12-DEC-07","job_id":"ST_CLERK","salary":"2400","commission_pct":null,"manager_id":"122","department_id":"50"},{"employee_id":"136","first_name":"Hazel","last_name":"Philtanker","email":"HPHILTAN","phone_number":"650.127.1634","hire_date":"06-FEB-08","job_id":"ST_CLERK","salary":"2200","commission_pct":null,"manager_id":"122","department_id":"50"},{"employee_id":"137","first_name":"Renske","last_name":"Ladwig","email":"RLADWIG","phone_number":"650.121.1234","hire_date":"14-JUL-03","job_id":"ST_CLERK","salary":"3600","commission_pct":null,"manager_id":"123","department_id":"50"},{"employee_id":"138","first_name":"Stephen","last_name":"Stiles","email":"SSTILES","phone_number":"650.121.2034","hire_date":"26-OCT-05","job_id":"ST_CLERK","salary":"3200","commission_pct":null,"manager_id":"123","department_id":"50"},{"employee_id":"139","first_name":"John","last_name":"Seo","email":"JSEO","phone_number":"650.121.2019","hire_date":"12-FEB-06","job_id":"ST_CLERK","salary":"2700","commission_pct":null,"manager_id":"123","department_id":"50"},{"employee_id":"140","first_name":"Joshua","last_name":"Patel","email":"JPATEL","phone_number":"650.121.1834","hire_date":"06-APR-06","job_id":"ST_CLERK","salary":"2500","commission_pct":null,"manager_id":"123","department_id":"50"}]],["17514746656015",[]]],"statementsMap":[["17514746656004",{"nodeId":"17514746656004","statement":{"Code":"import sys\nfrom pyspark.context import SparkContext\nfrom pyspark.sql import SparkSession\n\n\nfrom awsglue.utils import getResolvedOptions\n\nfrom pyspark.sql.functions import *\n\nfrom awsglue.context import GlueContext\n\nfrom awsglue.job import Job\n\nimport json\n\nimport boto3\n\nimport gzip\n\nimport io\n\nimport os\n\nimport logging\n\nfrom typing import Optional\n\nfrom pyspark.sql import SparkSession\n\nfrom urllib.parse import urlparse\n\nimport random\n\nfrom py4j.protocol import Py4JJavaError\n\nimport builtins\n\nimport csv\n\ndef normalize_folder_file(s3_path, bucket_name, key):\n import boto3\n max_size_mb=500\n s3_client = boto3.client('s3')\n is_file = False\n try:\n     s3_client.head_object(Bucket=bucket_name, Key=key)\n     is_file = True\n except:\n     pass\n if is_file:\n   return [s3_path]\n\n # It's a folder, list files\n prefix = key if key.endswith('/') else key + '/'\n list_of_files = []\n total_size_bytes = 0\n max_size_bytes = max_size_mb * 1024 * 1024  # Convert MB to bytes\n\n paginator = s3_client.get_paginator('list_objects_v2')\n\n near_limit = False\n\n for page in paginator.paginate(Bucket = bucket_name, Prefix = prefix):\n   if 'Contents' in page:\n     for obj in page['Contents']:\n       if not obj['Key'].endswith('/'):\n         # Get the file size in bytes\n         file_size = obj['Size']\n         # Check if adding this file would exceed our size limit\n         if total_size_bytes + file_size > max_size_bytes:\n           near_limit = True\n           # If we already have files and adding this one would exceed the limit, stop\n           break\n\n         # Add file to the list and update total size\n         list_of_files.append(f\"s3://{bucket_name}/{obj['Key']}\")\n         total_size_bytes += file_size\n\n         # If we've reached or exceeded the size limit, stop\n         if total_size_bytes >= max_size_bytes:\n           break\n   # If we've reached or exceeded the size limit, stop paginating\n     if total_size_bytes >= max_size_bytes or near_limit == True:\n       break\n # If no files found, use original path\n return list_of_files if list_of_files else [s3_path]\n\ndef parse_s3_path(path):\n if path.startswith(\"s3://\"):\n   parsed = urlparse(path)\n   return parsed.netloc, parsed.path.lstrip(\"/\")\n raise ValueError(\"Expected S3 URI with s3:// prefix\")\n\ndef is_single_file(path):\n return path.split(\"/\")[-1].count(\".\") > 0\n\ndef infer_format(path):\n ext = path.split(\".\")[-1].lower()\n return {\n   \"json\": \"json\",\n   \"csv\": \"csv\",\n   \"txt\": \"text\",\n   \"parquet\": \"parquet\",\n   \"avro\": \"avro\",\n   \"gz\": path.split(\".\")[-2].lower(),\n }.get(ext, None)\n\ndef sample_s3_files(source_path, bucket, prefix):\n files = normalize_folder_file(source_path, bucket, prefix)\n return random.sample(files, len(files))\n\ndef safe_stream_json_array_s3(spark, bucket, key, sample_size, max_bytes):\n s3 = boto3.client(\"s3\")\n raw = s3.get_object(Bucket=bucket, Key=key)[\"Body\"].read(max_bytes)\n if key.endswith(\".gz\"):\n   raw = gzip.decompress(raw)\n stream = io.StringIO(raw.decode(\"utf-8\", errors=\"replace\"))\n\n buffer = \"\"\n depth = 0\n in_string = False\n escaped = False\n objects = []\n reading = False\n while True:\n   c = stream.read(1)\n   if not c:\n     break\n   if c == '\"' and not escaped:\n     in_string = not in_string\n   elif c == '\\\\' and not escaped:\n     escaped = True\n     buffer += c\n     continue\n   else:\n     escaped = False\n\n   if not in_string:\n     if c == '{':\n       if depth == 0:\n         reading = True\n         buffer = \"\"\n       depth += 1\n     elif c == '}':\n       depth -= 1\n       if depth == 0:\n         reading = False\n         buffer += c\n         try:\n           obj = json.loads(buffer)\n           objects.append(obj)\n           if len(objects) >= sample_size:\n             break\n         except:\n           print(f\"⚠️ Failed to parse object: {e}\")\n         continue\n   if reading or (depth > 0):\n     buffer += c\n\n return spark.createDataFrame(objects)\n\ndef safe_read_json(spark, path, sample_size, max_bytes, multiline):\n if isinstance(max_bytes, str):\n   max_bytes = int(max_bytes.replace(\"_\", \"\"))\n bucket, key = parse_s3_path(path)\n if is_single_file(path):\n     return safe_stream_json_array_s3(spark, bucket, key, sample_size, max_bytes)\n else:\n   sample_paths = sample_s3_files(path, bucket, key)\n   return spark.read.option(\"multiline\", str(multiline).lower()).json(sample_paths).limit(sample_size)\n\ndef safe_read_csv(spark, path, sample_size, max_bytes, multiline, delimiter, escape, quote, inferschema, header):\n if isinstance(max_bytes, str):\n   max_bytes = int(max_bytes.replace(\"_\", \"\"))\n bucket, key = parse_s3_path(path)\n if is_single_file(path):\n   s3 = boto3.client(\"s3\")\n   raw = s3.get_object(Bucket=bucket, Key=key)[\"Body\"].read(max_bytes)\n   if key.endswith(\".gz\"):\n     raw = gzip.decompress(raw)\n   text = raw.decode(\"utf-8\", errors=\"replace\")\n   reader_args = {\n              'delimiter': delimiter,\n              'quotechar': quote,\n              'escapechar': escape\n               }\n    # Remove any keys where the value is None\n   reader_args = {k: v for k, v in reader_args.items() if v is not None}\n   csv_reader = csv.reader(\n                    io.StringIO(text),\n                    **reader_args\n                    )\n   column_names = []\n   rows = []\n   rows_list = list(csv_reader)\n   if header:\n     column_names = rows_list[0]\n     data_rows = rows_list[1:sample_size+1]\n   else:\n     num_columns = len(rows_list[0]) if rows_list else 0\n     column_names = [f\"col_{i}\" for i in range(num_columns)]\n     data_rows = rows_list[:sample_size]\n   return spark.createDataFrame(data_rows, column_names)\n else:\n   sample_paths = sample_s3_files(path, bucket, key)\n   return spark.read.option(\"header\", \"true\").csv(sample_paths).limit(sample_size)\n\ndef safe_read_text(spark, path, sample_size, max_bytes):\n return spark.read.text(path).limit(sample_size)\n\ndef safe_read_parquet(spark, path, sample_size):\n bucket, key = parse_s3_path(path)\n\n if is_single_file(path):\n   sample_paths = [path]\n else:\n   # Only list and load a small number of Parquet files\n   sample_paths = sample_s3_files(path, bucket, key)\n\n df = spark.read.parquet(*sample_paths)\n\n try:\n   count = df.count()\n   fraction = builtins.min(1.0, sample_size / builtins.max(count, 1))\n   return df.sample(withReplacement=False, fraction=fraction, seed=42).limit(sample_size)\n except Py4JJavaError:\n   return df.sample(withReplacement=False, fraction=0.001, seed=42).limit(sample_size)\n\ndef safe_read_avro(spark, path, sample_size):\n return spark.read.format(\"avro\").load(path).limit(sample_size)\n\ndef safe_read_s3(\n spark: SparkSession,\n path: str,\n format_hint: Optional[str] = None,\n sample_size: int = 100,\n max_bytes: int = 25_000_000,\n multiline_json: Optional[bool] = False,\n delimiter: Optional[str] = ',',\n escape: Optional[str] = None,\n quote: Optional[str] = None,\n multiline_csv: Optional[bool] = True,\n inferschema: Optional[bool] = True,\n header: Optional[bool] = True\n):\n if isinstance(max_bytes, str):\n   max_bytes = int(max_bytes.replace(\"_\", \"\"))\n\n format_hint = format_hint or infer_format(path)\n if not format_hint:\n   raise ValueError(\"Could not infer format from path\")\n\n if format_hint == \"json\":\n   return safe_read_json(spark, path, sample_size, max_bytes, multiline_json)\n elif format_hint == \"csv\":\n   return safe_read_csv(spark, path, sample_size, max_bytes, multiline_csv, delimiter, escape, quote, inferschema, header)\n elif format_hint == \"text\":\n   return safe_read_text(spark, path, sample_size, max_bytes)\n elif format_hint == \"parquet\":\n   return safe_read_parquet(spark, path, sample_size)\n elif format_hint == \"avro\":\n   return safe_read_avro(spark, path, sample_size)\n else:\n   raise ValueError(f\"Unsupported format: {format_hint}\")\n\nsc = SparkContext.getOrCreate()\nspark = SparkSession.builder.getOrCreate()\n\n\n# Script generated for node CatalogDataSource\nCatalogDataSource_17514746656004 = spark.sql(\"select * from `glue_db_ddsjx9xtu1v6i1`.`employee`\")\nfrom pyspark.sql.types import StructType, AtomicType\n\n# Extract schema for CatalogDataSource_17514746656004\nschema_json_CatalogDataSource_17514746656004 = CatalogDataSource_17514746656004.schema.json()\n\n# Filter only flat (primitive) fields from CatalogDataSource_17514746656004's schema\nflat_fields_CatalogDataSource_17514746656004 = [f.name for f in CatalogDataSource_17514746656004.schema.fields if isinstance(f.dataType, AtomicType)][:100]\n\n# Select flat fields and limit to 100 rows\nsample_df_CatalogDataSource_17514746656004 = CatalogDataSource_17514746656004.select(*flat_fields_CatalogDataSource_17514746656004).limit(100)\nsample_rows_CatalogDataSource_17514746656004 = sample_df_CatalogDataSource_17514746656004.collect()\n\n# Convert to safe stringified sample preview\nsample_data_CatalogDataSource_17514746656004 = [\n  {field: str(row[field]) if row[field] is not None else None for field in flat_fields_CatalogDataSource_17514746656004}\n  for row in sample_rows_CatalogDataSource_17514746656004\n]\n\n# Combine schema and sample\noutput_CatalogDataSource_17514746656004 = json.dumps({\n  \"Schema\": json.loads(schema_json_CatalogDataSource_17514746656004),\n  \"DataSample\": sample_data_CatalogDataSource_17514746656004\n}, default=str)\n\nprint(output_CatalogDataSource_17514746656004)","CompletedOn":1751474762342,"Id":2,"Output":{"Data":{"TextPlain":"{\"Schema\": {\"fields\": [{\"metadata\": {}, \"name\": \"employee_id\", \"nullable\": true, \"type\": \"long\"}, {\"metadata\": {}, \"name\": \"first_name\", \"nullable\": true, \"type\": \"string\"}, {\"metadata\": {}, \"name\": \"last_name\", \"nullable\": true, \"type\": \"string\"}, {\"metadata\": {}, \"name\": \"email\", \"nullable\": true, \"type\": \"string\"}, {\"metadata\": {}, \"name\": \"phone_number\", \"nullable\": true, \"type\": \"string\"}, {\"metadata\": {}, \"name\": \"hire_date\", \"nullable\": true, \"type\": \"string\"}, {\"metadata\": {}, \"name\": \"job_id\", \"nullable\": true, \"type\": \"string\"}, {\"metadata\": {}, \"name\": \"salary\", \"nullable\": true, \"type\": \"long\"}, {\"metadata\": {}, \"name\": \"commission_pct\", \"nullable\": true, \"type\": \"long\"}, {\"metadata\": {}, \"name\": \"manager_id\", \"nullable\": true, \"type\": \"long\"}, {\"metadata\": {}, \"name\": \"department_id\", \"nullable\": true, \"type\": \"long\"}], \"type\": \"struct\"}, \"DataSample\": [{\"employee_id\": null, \"first_name\": \"first_name\", \"last_name\": \"last_name\", \"email\": \"email\", \"phone_number\": \"phone_number\", \"hire_date\": \"hire_date\", \"job_id\": \"job_id\", \"salary\": null, \"commission_pct\": null, \"manager_id\": null, \"department_id\": null}, {\"employee_id\": \"198\", \"first_name\": \"Donald\", \"last_name\": \"OConnell\", \"email\": \"DOCONNEL\", \"phone_number\": \"650.507.9833\", \"hire_date\": \"21-JUN-07\", \"job_id\": \"SH_CLERK\", \"salary\": \"2600\", \"commission_pct\": null, \"manager_id\": \"124\", \"department_id\": \"50\"}, {\"employee_id\": \"199\", \"first_name\": \"Douglas\", \"last_name\": \"Grant\", \"email\": \"DGRANT\", \"phone_number\": \"650.507.9844\", \"hire_date\": \"13-JAN-08\", \"job_id\": \"SH_CLERK\", \"salary\": \"2600\", \"commission_pct\": null, \"manager_id\": \"124\", \"department_id\": \"50\"}, {\"employee_id\": \"200\", \"first_name\": \"Jennifer\", \"last_name\": \"Whalen\", \"email\": \"JWHALEN\", \"phone_number\": \"515.123.4444\", \"hire_date\": \"17-SEP-03\", \"job_id\": \"AD_ASST\", \"salary\": \"4400\", \"commission_pct\": null, \"manager_id\": \"101\", \"department_id\": \"10\"}, {\"employee_id\": \"201\", \"first_name\": \"Michael\", \"last_name\": \"Hartstein\", \"email\": \"MHARTSTE\", \"phone_number\": \"515.123.5555\", \"hire_date\": \"17-FEB-04\", \"job_id\": \"MK_MAN\", \"salary\": \"13000\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"20\"}, {\"employee_id\": \"202\", \"first_name\": \"Pat\", \"last_name\": \"Fay\", \"email\": \"PFAY\", \"phone_number\": \"603.123.6666\", \"hire_date\": \"17-AUG-05\", \"job_id\": \"MK_REP\", \"salary\": \"6000\", \"commission_pct\": null, \"manager_id\": \"201\", \"department_id\": \"20\"}, {\"employee_id\": \"203\", \"first_name\": \"Susan\", \"last_name\": \"Mavris\", \"email\": \"SMAVRIS\", \"phone_number\": \"515.123.7777\", \"hire_date\": \"07-JUN-02\", \"job_id\": \"HR_REP\", \"salary\": \"6500\", \"commission_pct\": null, \"manager_id\": \"101\", \"department_id\": \"40\"}, {\"employee_id\": \"204\", \"first_name\": \"Hermann\", \"last_name\": \"Baer\", \"email\": \"HBAER\", \"phone_number\": \"515.123.8888\", \"hire_date\": \"07-JUN-02\", \"job_id\": \"PR_REP\", \"salary\": \"10000\", \"commission_pct\": null, \"manager_id\": \"101\", \"department_id\": \"70\"}, {\"employee_id\": \"205\", \"first_name\": \"Shelley\", \"last_name\": \"Higgins\", \"email\": \"SHIGGINS\", \"phone_number\": \"515.123.8080\", \"hire_date\": \"07-JUN-02\", \"job_id\": \"AC_MGR\", \"salary\": \"12008\", \"commission_pct\": null, \"manager_id\": \"101\", \"department_id\": \"110\"}, {\"employee_id\": \"206\", \"first_name\": \"William\", \"last_name\": \"Gietz\", \"email\": \"WGIETZ\", \"phone_number\": \"515.123.8181\", \"hire_date\": \"07-JUN-02\", \"job_id\": \"AC_ACCOUNT\", \"salary\": \"8300\", \"commission_pct\": null, \"manager_id\": \"205\", \"department_id\": \"110\"}, {\"employee_id\": \"100\", \"first_name\": \"Steven\", \"last_name\": \"King\", \"email\": \"SKING\", \"phone_number\": \"515.123.4567\", \"hire_date\": \"17-JUN-03\", \"job_id\": \"AD_PRES\", \"salary\": \"24000\", \"commission_pct\": null, \"manager_id\": null, \"department_id\": \"90\"}, {\"employee_id\": \"101\", \"first_name\": \"Neena\", \"last_name\": \"Kochhar\", \"email\": \"NKOCHHAR\", \"phone_number\": \"515.123.4568\", \"hire_date\": \"21-SEP-05\", \"job_id\": \"AD_VP\", \"salary\": \"17000\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"90\"}, {\"employee_id\": \"102\", \"first_name\": \"Lex\", \"last_name\": \"De Haan\", \"email\": \"LDEHAAN\", \"phone_number\": \"515.123.4569\", \"hire_date\": \"13-JAN-01\", \"job_id\": \"AD_VP\", \"salary\": \"17000\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"90\"}, {\"employee_id\": \"103\", \"first_name\": \"Alexander\", \"last_name\": \"Hunold\", \"email\": \"AHUNOLD\", \"phone_number\": \"590.423.4567\", \"hire_date\": \"03-JAN-06\", \"job_id\": \"IT_PROG\", \"salary\": \"9000\", \"commission_pct\": null, \"manager_id\": \"102\", \"department_id\": \"60\"}, {\"employee_id\": \"104\", \"first_name\": \"Bruce\", \"last_name\": \"Ernst\", \"email\": \"BERNST\", \"phone_number\": \"590.423.4568\", \"hire_date\": \"21-MAY-07\", \"job_id\": \"IT_PROG\", \"salary\": \"6000\", \"commission_pct\": null, \"manager_id\": \"103\", \"department_id\": \"60\"}, {\"employee_id\": \"105\", \"first_name\": \"David\", \"last_name\": \"Austin\", \"email\": \"DAUSTIN\", \"phone_number\": \"590.423.4569\", \"hire_date\": \"25-JUN-05\", \"job_id\": \"IT_PROG\", \"salary\": \"4800\", \"commission_pct\": null, \"manager_id\": \"103\", \"department_id\": \"60\"}, {\"employee_id\": \"106\", \"first_name\": \"Valli\", \"last_name\": \"Pataballa\", \"email\": \"VPATABAL\", \"phone_number\": \"590.423.4560\", \"hire_date\": \"05-FEB-06\", \"job_id\": \"IT_PROG\", \"salary\": \"4800\", \"commission_pct\": null, \"manager_id\": \"103\", \"department_id\": \"60\"}, {\"employee_id\": \"107\", \"first_name\": \"Diana\", \"last_name\": \"Lorentz\", \"email\": \"DLORENTZ\", \"phone_number\": \"590.423.5567\", \"hire_date\": \"07-FEB-07\", \"job_id\": \"IT_PROG\", \"salary\": \"4200\", \"commission_pct\": null, \"manager_id\": \"103\", \"department_id\": \"60\"}, {\"employee_id\": \"108\", \"first_name\": \"Nancy\", \"last_name\": \"Greenberg\", \"email\": \"NGREENBE\", \"phone_number\": \"515.124.4569\", \"hire_date\": \"17-AUG-02\", \"job_id\": \"FI_MGR\", \"salary\": \"12008\", \"commission_pct\": null, \"manager_id\": \"101\", \"department_id\": \"100\"}, {\"employee_id\": \"109\", \"first_name\": \"Daniel\", \"last_name\": \"Faviet\", \"email\": \"DFAVIET\", \"phone_number\": \"515.124.4169\", \"hire_date\": \"16-AUG-02\", \"job_id\": \"FI_ACCOUNT\", \"salary\": \"9000\", \"commission_pct\": null, \"manager_id\": \"108\", \"department_id\": \"100\"}, {\"employee_id\": \"110\", \"first_name\": \"John\", \"last_name\": \"Chen\", \"email\": \"JCHEN\", \"phone_number\": \"515.124.4269\", \"hire_date\": \"28-SEP-05\", \"job_id\": \"FI_ACCOUNT\", \"salary\": \"8200\", \"commission_pct\": null, \"manager_id\": \"108\", \"department_id\": \"100\"}, {\"employee_id\": \"111\", \"first_name\": \"Ismael\", \"last_name\": \"Sciarra\", \"email\": \"ISCIARRA\", \"phone_number\": \"515.124.4369\", \"hire_date\": \"30-SEP-05\", \"job_id\": \"FI_ACCOUNT\", \"salary\": \"7700\", \"commission_pct\": null, \"manager_id\": \"108\", \"department_id\": \"100\"}, {\"employee_id\": \"112\", \"first_name\": \"Jose Manuel\", \"last_name\": \"Urman\", \"email\": \"JMURMAN\", \"phone_number\": \"515.124.4469\", \"hire_date\": \"07-MAR-06\", \"job_id\": \"FI_ACCOUNT\", \"salary\": \"7800\", \"commission_pct\": null, \"manager_id\": \"108\", \"department_id\": \"100\"}, {\"employee_id\": \"113\", \"first_name\": \"Luis\", \"last_name\": \"Popp\", \"email\": \"LPOPP\", \"phone_number\": \"515.124.4567\", \"hire_date\": \"07-DEC-07\", \"job_id\": \"FI_ACCOUNT\", \"salary\": \"6900\", \"commission_pct\": null, \"manager_id\": \"108\", \"department_id\": \"100\"}, {\"employee_id\": \"114\", \"first_name\": \"Den\", \"last_name\": \"Raphaely\", \"email\": \"DRAPHEAL\", \"phone_number\": \"515.127.4561\", \"hire_date\": \"07-DEC-02\", \"job_id\": \"PU_MAN\", \"salary\": \"11000\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"30\"}, {\"employee_id\": \"115\", \"first_name\": \"Alexander\", \"last_name\": \"Khoo\", \"email\": \"AKHOO\", \"phone_number\": \"515.127.4562\", \"hire_date\": \"18-MAY-03\", \"job_id\": \"PU_CLERK\", \"salary\": \"3100\", \"commission_pct\": null, \"manager_id\": \"114\", \"department_id\": \"30\"}, {\"employee_id\": \"116\", \"first_name\": \"Shelli\", \"last_name\": \"Baida\", \"email\": \"SBAIDA\", \"phone_number\": \"515.127.4563\", \"hire_date\": \"24-DEC-05\", \"job_id\": \"PU_CLERK\", \"salary\": \"2900\", \"commission_pct\": null, \"manager_id\": \"114\", \"department_id\": \"30\"}, {\"employee_id\": \"117\", \"first_name\": \"Sigal\", \"last_name\": \"Tobias\", \"email\": \"STOBIAS\", \"phone_number\": \"515.127.4564\", \"hire_date\": \"24-JUL-05\", \"job_id\": \"PU_CLERK\", \"salary\": \"2800\", \"commission_pct\": null, \"manager_id\": \"114\", \"department_id\": \"30\"}, {\"employee_id\": \"118\", \"first_name\": \"Guy\", \"last_name\": \"Himuro\", \"email\": \"GHIMURO\", \"phone_number\": \"515.127.4565\", \"hire_date\": \"15-NOV-06\", \"job_id\": \"PU_CLERK\", \"salary\": \"2600\", \"commission_pct\": null, \"manager_id\": \"114\", \"department_id\": \"30\"}, {\"employee_id\": \"119\", \"first_name\": \"Karen\", \"last_name\": \"Colmenares\", \"email\": \"KCOLMENA\", \"phone_number\": \"515.127.4566\", \"hire_date\": \"10-AUG-07\", \"job_id\": \"PU_CLERK\", \"salary\": \"2500\", \"commission_pct\": null, \"manager_id\": \"114\", \"department_id\": \"30\"}, {\"employee_id\": \"120\", \"first_name\": \"Matthew\", \"last_name\": \"Weiss\", \"email\": \"MWEISS\", \"phone_number\": \"650.123.1234\", \"hire_date\": \"18-JUL-04\", \"job_id\": \"ST_MAN\", \"salary\": \"8000\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"50\"}, {\"employee_id\": \"121\", \"first_name\": \"Adam\", \"last_name\": \"Fripp\", \"email\": \"AFRIPP\", \"phone_number\": \"650.123.2234\", \"hire_date\": \"10-APR-05\", \"job_id\": \"ST_MAN\", \"salary\": \"8200\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"50\"}, {\"employee_id\": \"122\", \"first_name\": \"Payam\", \"last_name\": \"Kaufling\", \"email\": \"PKAUFLIN\", \"phone_number\": \"650.123.3234\", \"hire_date\": \"01-MAY-03\", \"job_id\": \"ST_MAN\", \"salary\": \"7900\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"50\"}, {\"employee_id\": \"123\", \"first_name\": \"Shanta\", \"last_name\": \"Vollman\", \"email\": \"SVOLLMAN\", \"phone_number\": \"650.123.4234\", \"hire_date\": \"10-OCT-05\", \"job_id\": \"ST_MAN\", \"salary\": \"6500\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"50\"}, {\"employee_id\": \"124\", \"first_name\": \"Kevin\", \"last_name\": \"Mourgos\", \"email\": \"KMOURGOS\", \"phone_number\": \"650.123.5234\", \"hire_date\": \"16-NOV-07\", \"job_id\": \"ST_MAN\", \"salary\": \"5800\", \"commission_pct\": null, \"manager_id\": \"100\", \"department_id\": \"50\"}, {\"employee_id\": \"125\", \"first_name\": \"Julia\", \"last_name\": \"Nayer\", \"email\": \"JNAYER\", \"phone_number\": \"650.124.1214\", \"hire_date\": \"16-JUL-05\", \"job_id\": \"ST_CLERK\", \"salary\": \"3200\", \"commission_pct\": null, \"manager_id\": \"120\", \"department_id\": \"50\"}, {\"employee_id\": \"126\", \"first_name\": \"Irene\", \"last_name\": \"Mikkilineni\", \"email\": \"IMIKKILI\", \"phone_number\": \"650.124.1224\", \"hire_date\": \"28-SEP-06\", \"job_id\": \"ST_CLERK\", \"salary\": \"2700\", \"commission_pct\": null, \"manager_id\": \"120\", \"department_id\": \"50\"}, {\"employee_id\": \"127\", \"first_name\": \"James\", \"last_name\": \"Landry\", \"email\": \"JLANDRY\", \"phone_number\": \"650.124.1334\", \"hire_date\": \"14-JAN-07\", \"job_id\": \"ST_CLERK\", \"salary\": \"2400\", \"commission_pct\": null, \"manager_id\": \"120\", \"department_id\": \"50\"}, {\"employee_id\": \"128\", \"first_name\": \"Steven\", \"last_name\": \"Markle\", \"email\": \"SMARKLE\", \"phone_number\": \"650.124.1434\", \"hire_date\": \"08-MAR-08\", \"job_id\": \"ST_CLERK\", \"salary\": \"2200\", \"commission_pct\": null, \"manager_id\": \"120\", \"department_id\": \"50\"}, {\"employee_id\": \"129\", \"first_name\": \"Laura\", \"last_name\": \"Bissot\", \"email\": \"LBISSOT\", \"phone_number\": \"650.124.5234\", \"hire_date\": \"20-AUG-05\", \"job_id\": \"ST_CLERK\", \"salary\": \"3300\", \"commission_pct\": null, \"manager_id\": \"121\", \"department_id\": \"50\"}, {\"employee_id\": \"130\", \"first_name\": \"Mozhe\", \"last_name\": \"Atkinson\", \"email\": \"MATKINSO\", \"phone_number\": \"650.124.6234\", \"hire_date\": \"30-OCT-05\", \"job_id\": \"ST_CLERK\", \"salary\": \"2800\", \"commission_pct\": null, \"manager_id\": \"121\", \"department_id\": \"50\"}, {\"employee_id\": \"131\", \"first_name\": \"James\", \"last_name\": \"Marlow\", \"email\": \"JAMRLOW\", \"phone_number\": \"650.124.7234\", \"hire_date\": \"16-FEB-05\", \"job_id\": \"ST_CLERK\", \"salary\": \"2500\", \"commission_pct\": null, \"manager_id\": \"121\", \"department_id\": \"50\"}, {\"employee_id\": \"132\", \"first_name\": \"TJ\", \"last_name\": \"Olson\", \"email\": \"TJOLSON\", \"phone_number\": \"650.124.8234\", \"hire_date\": \"10-APR-07\", \"job_id\": \"ST_CLERK\", \"salary\": \"2100\", \"commission_pct\": null, \"manager_id\": \"121\", \"department_id\": \"50\"}, {\"employee_id\": \"133\", \"first_name\": \"Jason\", \"last_name\": \"Mallin\", \"email\": \"JMALLIN\", \"phone_number\": \"650.127.1934\", \"hire_date\": \"14-JUN-04\", \"job_id\": \"ST_CLERK\", \"salary\": \"3300\", \"commission_pct\": null, \"manager_id\": \"122\", \"department_id\": \"50\"}, {\"employee_id\": \"134\", \"first_name\": \"Michael\", \"last_name\": \"Rogers\", \"email\": \"MROGERS\", \"phone_number\": \"650.127.1834\", \"hire_date\": \"26-AUG-06\", \"job_id\": \"ST_CLERK\", \"salary\": \"2900\", \"commission_pct\": null, \"manager_id\": \"122\", \"department_id\": \"50\"}, {\"employee_id\": \"135\", \"first_name\": \"Ki\", \"last_name\": \"Gee\", \"email\": \"KGEE\", \"phone_number\": \"650.127.1734\", \"hire_date\": \"12-DEC-07\", \"job_id\": \"ST_CLERK\", \"salary\": \"2400\", \"commission_pct\": null, \"manager_id\": \"122\", \"department_id\": \"50\"}, {\"employee_id\": \"136\", \"first_name\": \"Hazel\", \"last_name\": \"Philtanker\", \"email\": \"HPHILTAN\", \"phone_number\": \"650.127.1634\", \"hire_date\": \"06-FEB-08\", \"job_id\": \"ST_CLERK\", \"salary\": \"2200\", \"commission_pct\": null, \"manager_id\": \"122\", \"department_id\": \"50\"}, {\"employee_id\": \"137\", \"first_name\": \"Renske\", \"last_name\": \"Ladwig\", \"email\": \"RLADWIG\", \"phone_number\": \"650.121.1234\", \"hire_date\": \"14-JUL-03\", \"job_id\": \"ST_CLERK\", \"salary\": \"3600\", \"commission_pct\": null, \"manager_id\": \"123\", \"department_id\": \"50\"}, {\"employee_id\": \"138\", \"first_name\": \"Stephen\", \"last_name\": \"Stiles\", \"email\": \"SSTILES\", \"phone_number\": \"650.121.2034\", \"hire_date\": \"26-OCT-05\", \"job_id\": \"ST_CLERK\", \"salary\": \"3200\", \"commission_pct\": null, \"manager_id\": \"123\", \"department_id\": \"50\"}, {\"employee_id\": \"139\", \"first_name\": \"John\", \"last_name\": \"Seo\", \"email\": \"JSEO\", \"phone_number\": \"650.121.2019\", \"hire_date\": \"12-FEB-06\", \"job_id\": \"ST_CLERK\", \"salary\": \"2700\", \"commission_pct\": null, \"manager_id\": \"123\", \"department_id\": \"50\"}, {\"employee_id\": \"140\", \"first_name\": \"Joshua\", \"last_name\": \"Patel\", \"email\": \"JPATEL\", \"phone_number\": \"650.121.1834\", \"hire_date\": \"06-APR-06\", \"job_id\": \"ST_CLERK\", \"salary\": \"2500\", \"commission_pct\": null, \"manager_id\": \"123\", \"department_id\": \"50\"}]}"},"ExecutionCount":2,"Status":"ok"},"Progress":1,"StartedOn":1751474751768,"State":"AVAILABLE"},"executionState":"AVAILABLE","codeSnippet":"import sys\nfrom pyspark.context import SparkContext\nfrom pyspark.sql import SparkSession\n\n\nfrom awsglue.utils import getResolvedOptions\n\nfrom pyspark.sql.functions import *\n\nfrom awsglue.context import GlueContext\n\nfrom awsglue.job import Job\n\nimport json\n\nimport boto3\n\nimport gzip\n\nimport io\n\nimport os\n\nimport logging\n\nfrom typing import Optional\n\nfrom pyspark.sql import SparkSession\n\nfrom urllib.parse import urlparse\n\nimport random\n\nfrom py4j.protocol import Py4JJavaError\n\nimport builtins\n\nimport csv\n\ndef normalize_folder_file(s3_path, bucket_name, key):\n import boto3\n max_size_mb=500\n s3_client = boto3.client('s3')\n is_file = False\n try:\n     s3_client.head_object(Bucket=bucket_name, Key=key)\n     is_file = True\n except:\n     pass\n if is_file:\n   return [s3_path]\n\n # It's a folder, list files\n prefix = key if key.endswith('/') else key + '/'\n list_of_files = []\n total_size_bytes = 0\n max_size_bytes = max_size_mb * 1024 * 1024  # Convert MB to bytes\n\n paginator = s3_client.get_paginator('list_objects_v2')\n\n near_limit = False\n\n for page in paginator.paginate(Bucket = bucket_name, Prefix = prefix):\n   if 'Contents' in page:\n     for obj in page['Contents']:\n       if not obj['Key'].endswith('/'):\n         # Get the file size in bytes\n         file_size = obj['Size']\n         # Check if adding this file would exceed our size limit\n         if total_size_bytes + file_size > max_size_bytes:\n           near_limit = True\n           # If we already have files and adding this one would exceed the limit, stop\n           break\n\n         # Add file to the list and update total size\n         list_of_files.append(f\"s3://{bucket_name}/{obj['Key']}\")\n         total_size_bytes += file_size\n\n         # If we've reached or exceeded the size limit, stop\n         if total_size_bytes >= max_size_bytes:\n           break\n   # If we've reached or exceeded the size limit, stop paginating\n     if total_size_bytes >= max_size_bytes or near_limit == True:\n       break\n # If no files found, use original path\n return list_of_files if list_of_files else [s3_path]\n\ndef parse_s3_path(path):\n if path.startswith(\"s3://\"):\n   parsed = urlparse(path)\n   return parsed.netloc, parsed.path.lstrip(\"/\")\n raise ValueError(\"Expected S3 URI with s3:// prefix\")\n\ndef is_single_file(path):\n return path.split(\"/\")[-1].count(\".\") > 0\n\ndef infer_format(path):\n ext = path.split(\".\")[-1].lower()\n return {\n   \"json\": \"json\",\n   \"csv\": \"csv\",\n   \"txt\": \"text\",\n   \"parquet\": \"parquet\",\n   \"avro\": \"avro\",\n   \"gz\": path.split(\".\")[-2].lower(),\n }.get(ext, None)\n\ndef sample_s3_files(source_path, bucket, prefix):\n files = normalize_folder_file(source_path, bucket, prefix)\n return random.sample(files, len(files))\n\ndef safe_stream_json_array_s3(spark, bucket, key, sample_size, max_bytes):\n s3 = boto3.client(\"s3\")\n raw = s3.get_object(Bucket=bucket, Key=key)[\"Body\"].read(max_bytes)\n if key.endswith(\".gz\"):\n   raw = gzip.decompress(raw)\n stream = io.StringIO(raw.decode(\"utf-8\", errors=\"replace\"))\n\n buffer = \"\"\n depth = 0\n in_string = False\n escaped = False\n objects = []\n reading = False\n while True:\n   c = stream.read(1)\n   if not c:\n     break\n   if c == '\"' and not escaped:\n     in_string = not in_string\n   elif c == '\\\\' and not escaped:\n     escaped = True\n     buffer += c\n     continue\n   else:\n     escaped = False\n\n   if not in_string:\n     if c == '{':\n       if depth == 0:\n         reading = True\n         buffer = \"\"\n       depth += 1\n     elif c == '}':\n       depth -= 1\n       if depth == 0:\n         reading = False\n         buffer += c\n         try:\n           obj = json.loads(buffer)\n           objects.append(obj)\n           if len(objects) >= sample_size:\n             break\n         except:\n           print(f\"⚠️ Failed to parse object: {e}\")\n         continue\n   if reading or (depth > 0):\n     buffer += c\n\n return spark.createDataFrame(objects)\n\ndef safe_read_json(spark, path, sample_size, max_bytes, multiline):\n if isinstance(max_bytes, str):\n   max_bytes = int(max_bytes.replace(\"_\", \"\"))\n bucket, key = parse_s3_path(path)\n if is_single_file(path):\n     return safe_stream_json_array_s3(spark, bucket, key, sample_size, max_bytes)\n else:\n   sample_paths = sample_s3_files(path, bucket, key)\n   return spark.read.option(\"multiline\", str(multiline).lower()).json(sample_paths).limit(sample_size)\n\ndef safe_read_csv(spark, path, sample_size, max_bytes, multiline, delimiter, escape, quote, inferschema, header):\n if isinstance(max_bytes, str):\n   max_bytes = int(max_bytes.replace(\"_\", \"\"))\n bucket, key = parse_s3_path(path)\n if is_single_file(path):\n   s3 = boto3.client(\"s3\")\n   raw = s3.get_object(Bucket=bucket, Key=key)[\"Body\"].read(max_bytes)\n   if key.endswith(\".gz\"):\n     raw = gzip.decompress(raw)\n   text = raw.decode(\"utf-8\", errors=\"replace\")\n   reader_args = {\n              'delimiter': delimiter,\n              'quotechar': quote,\n              'escapechar': escape\n               }\n    # Remove any keys where the value is None\n   reader_args = {k: v for k, v in reader_args.items() if v is not None}\n   csv_reader = csv.reader(\n                    io.StringIO(text),\n                    **reader_args\n                    )\n   column_names = []\n   rows = []\n   rows_list = list(csv_reader)\n   if header:\n     column_names = rows_list[0]\n     data_rows = rows_list[1:sample_size+1]\n   else:\n     num_columns = len(rows_list[0]) if rows_list else 0\n     column_names = [f\"col_{i}\" for i in range(num_columns)]\n     data_rows = rows_list[:sample_size]\n   return spark.createDataFrame(data_rows, column_names)\n else:\n   sample_paths = sample_s3_files(path, bucket, key)\n   return spark.read.option(\"header\", \"true\").csv(sample_paths).limit(sample_size)\n\ndef safe_read_text(spark, path, sample_size, max_bytes):\n return spark.read.text(path).limit(sample_size)\n\ndef safe_read_parquet(spark, path, sample_size):\n bucket, key = parse_s3_path(path)\n\n if is_single_file(path):\n   sample_paths = [path]\n else:\n   # Only list and load a small number of Parquet files\n   sample_paths = sample_s3_files(path, bucket, key)\n\n df = spark.read.parquet(*sample_paths)\n\n try:\n   count = df.count()\n   fraction = builtins.min(1.0, sample_size / builtins.max(count, 1))\n   return df.sample(withReplacement=False, fraction=fraction, seed=42).limit(sample_size)\n except Py4JJavaError:\n   return df.sample(withReplacement=False, fraction=0.001, seed=42).limit(sample_size)\n\ndef safe_read_avro(spark, path, sample_size):\n return spark.read.format(\"avro\").load(path).limit(sample_size)\n\ndef safe_read_s3(\n spark: SparkSession,\n path: str,\n format_hint: Optional[str] = None,\n sample_size: int = 100,\n max_bytes: int = 25_000_000,\n multiline_json: Optional[bool] = False,\n delimiter: Optional[str] = ',',\n escape: Optional[str] = None,\n quote: Optional[str] = None,\n multiline_csv: Optional[bool] = True,\n inferschema: Optional[bool] = True,\n header: Optional[bool] = True\n):\n if isinstance(max_bytes, str):\n   max_bytes = int(max_bytes.replace(\"_\", \"\"))\n\n format_hint = format_hint or infer_format(path)\n if not format_hint:\n   raise ValueError(\"Could not infer format from path\")\n\n if format_hint == \"json\":\n   return safe_read_json(spark, path, sample_size, max_bytes, multiline_json)\n elif format_hint == \"csv\":\n   return safe_read_csv(spark, path, sample_size, max_bytes, multiline_csv, delimiter, escape, quote, inferschema, header)\n elif format_hint == \"text\":\n   return safe_read_text(spark, path, sample_size, max_bytes)\n elif format_hint == \"parquet\":\n   return safe_read_parquet(spark, path, sample_size)\n elif format_hint == \"avro\":\n   return safe_read_avro(spark, path, sample_size)\n else:\n   raise ValueError(f\"Unsupported format: {format_hint}\")\n\nsc = SparkContext.getOrCreate()\nspark = SparkSession.builder.getOrCreate()\n\n\n# Script generated for node CatalogDataSource\nCatalogDataSource_17514746656004 = spark.sql(\"select * from `glue_db_ddsjx9xtu1v6i1`.`employee`\")\nfrom pyspark.sql.types import StructType, AtomicType\n\n# Extract schema for CatalogDataSource_17514746656004\nschema_json_CatalogDataSource_17514746656004 = CatalogDataSource_17514746656004.schema.json()\n\n# Filter only flat (primitive) fields from CatalogDataSource_17514746656004's schema\nflat_fields_CatalogDataSource_17514746656004 = [f.name for f in CatalogDataSource_17514746656004.schema.fields if isinstance(f.dataType, AtomicType)][:100]\n\n# Select flat fields and limit to 100 rows\nsample_df_CatalogDataSource_17514746656004 = CatalogDataSource_17514746656004.select(*flat_fields_CatalogDataSource_17514746656004).limit(100)\nsample_rows_CatalogDataSource_17514746656004 = sample_df_CatalogDataSource_17514746656004.collect()\n\n# Convert to safe stringified sample preview\nsample_data_CatalogDataSource_17514746656004 = [\n  {field: str(row[field]) if row[field] is not None else None for field in flat_fields_CatalogDataSource_17514746656004}\n  for row in sample_rows_CatalogDataSource_17514746656004\n]\n\n# Combine schema and sample\noutput_CatalogDataSource_17514746656004 = json.dumps({\n  \"Schema\": json.loads(schema_json_CatalogDataSource_17514746656004),\n  \"DataSample\": sample_data_CatalogDataSource_17514746656004\n}, default=str)\n\nprint(output_CatalogDataSource_17514746656004)","executorCode":[]}],["17514746656015",{"nodeId":"17514746656015","statement":{"Code":"# Script generated for node FilterTransform\nFilterTransform_17514746656015 = CatalogDataSource_17514746656004.filter(\"`salary` > '100k'\")\noutputFilterTransform_17514746656015 = json.dumps({\"Schema\": FilterTransform_17514746656015.schema.jsonValue(), \"DataSample\": [row.asDict() for row in FilterTransform_17514746656015.take(100)]}, default=str)\nprint(outputFilterTransform_17514746656015)","CompletedOn":1751474720893,"Id":1,"Output":{"Data":{"TextPlain":""},"ErrorName":"NameError","ErrorValue":"name 'CatalogDataSource_17514746656004' is not defined","ExecutionCount":1,"Status":"error","Traceback":["Traceback (most recent call last):\n","NameError: name 'CatalogDataSource_17514746656004' is not defined\n"]},"Progress":1,"StartedOn":1751474720890,"State":"AVAILABLE"},"executionState":"AVAILABLE","codeSnippet":"# Script generated for node FilterTransform\nFilterTransform_17514746656015 = CatalogDataSource_17514746656004.filter(\"`salary` > '100k'\")\noutputFilterTransform_17514746656015 = json.dumps({\"Schema\": FilterTransform_17514746656015.schema.jsonValue(), \"DataSample\": [row.asDict() for row in FilterTransform_17514746656015.take(100)]}, default=str)\nprint(outputFilterTransform_17514746656015)","executorCode":[]}]],"createSessionRequest":{"Role":"arn:aws:iam::841815105446:role/datazone_usr_role_4uh5o13tjcakvd_4n5bxpjsnwdcmh","Connections":{"Connections":["datazone-glue-network-connection-4uh5o13tjcakvd-dev"]},"Command":{"Name":"glueetl","PythonVersion":"3"},"DefaultArguments":{"--enable-glue-datacatalog":"true","--enable-auto-scaling":"true","--project_s3_path":"s3://amazon-sagemaker-841815105446-us-east-2-8d69110117c2/dzd_d4jvhfifm74a5l/4uh5o13tjcakvd/dev","--redshift_iam_role":"arn:aws:iam::841815105446:role/datazone_usr_role_4uh5o13tjcakvd_4n5bxpjsnwdcmh","--redshift_tempdir":"s3://amazon-sagemaker-841815105446-us-east-2-8d69110117c2/dzd_d4jvhfifm74a5l/4uh5o13tjcakvd/dev/redshift-tmp/","--enable-lakeformation-fine-grained-access":"false","--datalake-formats":"iceberg","--conf":"spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions --conf spark.datasource.redshift.community.glue_endpoint=https://glue.us-east-2.amazonaws.com --conf spark.datasource.redshift.community.data_api_endpoint=https://redshift-data.us-east-2.amazonaws.com --conf spark.hadoop.fs.s3.impl=com.amazon.ws.emr.hadoop.fs.EmrFileSystem --conf spark.sql.catalog.spark_catalog=org.apache.iceberg.spark.SparkSessionCatalog --conf spark.sql.catalog.spark_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog --conf spark.sql.catalog.spark_catalog.glue.id=841815105446 --conf spark.sql.catalog.spark_catalog.glue.account-id=841815105446 --conf spark.sql.catalog.spark_catalog.glue.endpoint=https://glue.us-east-2.amazonaws.com --conf spark.sql.catalog.spark_catalog.client.region=us-east-2"},"GlueVersion":"5.0","RequestOrigin":"SageMakerUnifiedStudio_VisualETLDataPreview","Timeout":60,"IdleTimeout":15,"NumberOfWorkers":10,"WorkerType":"G.1X","Tags":{"AmazonDataZoneEnvironment":"4n5bxpjsnwdcmh","AmazonDataZoneProject":"4uh5o13tjcakvd","AmazonDataZoneDomain":"dzd_d4jvhfifm74a5l"}},"createSessionAdhocRequest":{"DefaultArguments":{"--enable-glue-datacatalog":"true","--enable-auto-scaling":"true","--project_s3_path":"s3://amazon-sagemaker-841815105446-us-east-2-8d69110117c2/dzd_d4jvhfifm74a5l/4uh5o13tjcakvd/dev","--redshift_iam_role":"arn:aws:iam::841815105446:role/datazone_usr_role_4uh5o13tjcakvd_4n5bxpjsnwdcmh","--redshift_tempdir":"s3://amazon-sagemaker-841815105446-us-east-2-8d69110117c2/dzd_d4jvhfifm74a5l/4uh5o13tjcakvd/dev/redshift-tmp/","--enable-lakeformation-fine-grained-access":"false","--datalake-formats":"iceberg","--conf":"spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions --conf spark.datasource.redshift.community.glue_endpoint=https://glue.us-east-2.amazonaws.com --conf spark.datasource.redshift.community.data_api_endpoint=https://redshift-data.us-east-2.amazonaws.com --conf spark.hadoop.fs.s3.impl=com.amazon.ws.emr.hadoop.fs.EmrFileSystem --conf spark.sql.catalog.spark_catalog=org.apache.iceberg.spark.SparkSessionCatalog --conf spark.sql.catalog.spark_catalog.catalog-impl=org.apache.iceberg.aws.glue.GlueCatalog --conf spark.sql.catalog.spark_catalog.glue.id=841815105446 --conf spark.sql.catalog.spark_catalog.glue.account-id=841815105446 --conf spark.sql.catalog.spark_catalog.glue.endpoint=https://glue.us-east-2.amazonaws.com --conf spark.sql.catalog.spark_catalog.client.region=us-east-2"}},"dpSettings":{"autoImportLibs":true,"autoRestart":true,"sampleSize":100,"sampleColSize":100},"computeConnection":{"configurations":[{"classification":"GlueDefaultArgument","properties":{"--enable-lakeformation-fine-grained-access":"false"}}],"domainIdentifier":"dzd_d4jvhfifm74a5l","projectIdentifier":"4uh5o13tjcakvd","environmentIdentifier":"4n5bxpjsnwdcmh","connectionIdentifier":"5fjz15p8pqa1wp","name":"project.spark.compatibility","type":"SPARK","authorizationMode":"PROJECT","provisioningType":"MANAGED","location":{"awsRegion":"us-east-2","awsAccountId":"841815105446"},"physicalEndpoints":[{"awsLocation":{"awsAccountId":"841815105446","awsRegion":"us-east-2"},"glueConnectionName":"datazone-glue-network-connection-4uh5o13tjcakvd-dev"}],"sparkGlueProperties":{"glueConnection":{},"sessionConfigs":{"idle_timeout":60,"glue_version":"5.0","worker_type":"G.1X","number_of_workers":10}}},"isSaved":true}},"nbformat":4,"nbformat_minor":5}